import "result.hob" as result;
import "process.hob" as process;
import "io.hob" as io;
import strings;
import result as stdResult;
import std;

public extern(getuid) fun getUid() -> i32;
extern fun chroot(root: *u8) -> i32;
extern fun chdir(root: *u8) -> i32;
extern fun setuid(root: i32) -> i32;
extern fun sethostname(hostname: *u8, len: usize) -> i32;

fun changeReqStr(fn: fun (*u8) -> i32, arg: string) -> result.Result.<std.None> {
    var allocated = strings.fromString(arg);
    defer allocated.free();
    return result.newMapped.<std.None>(fn(allocated.makeCString()), result.toNone);
}

public fun uidMapOne(pid: process.Pid, source: i32, target: i32) -> result.Result.<std.None> {
    var path = strings.fromString("/proc/");
    defer path.free();
    path.appendInt32(pid);
    path.appendSlice("/uid_map");

    var request = strings.fromString("");
    defer request.free();
    request.appendInt32(source);
    request.appendSlice(" ");
    request.appendInt32(target);
    request.appendSlice(" 1\n");

    final file = io.openWrite(path.data as string).unwrap();
    defer file.close();
    file.putString(request.data as string);

    return stdResult.ok.<std.None, result.Errno>(std.none());
}

public fun setUid(uid: i32) -> result.Result.<std.None> {
    return result.newMapped.<std.None>(setuid(uid), result.toNone);
}

public fun changeRoot(root: string) -> result.Result.<std.None> {
    return changeReqStr(chroot, root);
}

public fun changeDir(root: string) -> result.Result.<std.None> {
    return changeReqStr(chdir, root);
}

public fun changeHostname(hostname: string) -> result.Result.<std.None> {
    return result.newMapped.<std.None>(sethostname(hostname.raw, hostname.length), result.toNone);
}
